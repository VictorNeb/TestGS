name: Fetch WordPress Blogs

on:
  repository_dispatch:
    types: [wordpress_update]
  schedule:
    - cron: "0 */6 * * *" # Runs every 6 hours as backup
  workflow_dispatch: # Manual trigger

jobs:
  update-blog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Dependencies
        run: npm install axios @octokit/rest
        
      - name: Fetch and Update Posts
        run: |
          cat > fetch-posts.js << 'EOF'
          const axios = require('axios');
          const { Octokit } = require('@octokit/rest');
          
          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN
          });
          
          const OWNER = process.env.GITHUB_REPOSITORY.split('/')[0];
          const REPO = process.env.GITHUB_REPOSITORY.split('/')[1];
          
          async function fetchPosts() {
            try {
              const response = await axios.get(
                process.env.WORDPRESS_API_URL,
                {
                  headers: {
                    'Accept': 'application/json',
                    'Authorization': `Bearer ${process.env.WORDPRESS_TOKEN}`
                  }
                }
              );
              
              for (const post of response.data) {
                const content = `---
title: "${post.title.rendered.replace(/"/g, '\\"')}"
date: "${post.date}"
excerpt: "${post.excerpt.rendered.replace(/<[^>]*>/g, '').replace(/"/g, '\\"').trim()}"
featuredImage: "${post._embedded?.['wp:featuredmedia']?.[0]?.source_url || ''}"
author: "${post._embedded?.author?.[0]?.name || ''}"
---

${post.content.rendered}`;

                try {
                  // Try to get existing file
                  const { data: existingFile } = await octokit.rest.repos.getContent({
                    owner: OWNER,
                    repo: REPO,
                    path: `src/content/blog/${post.slug}.md`,
                  });

                  // Update existing file
                  await octokit.rest.repos.createOrUpdateFileContents({
                    owner: OWNER,
                    repo: REPO,
                    path: `src/content/blog/${post.slug}.md`,
                    message: `Update blog post: ${post.title.rendered}`,
                    content: Buffer.from(content).toString('base64'),
                    sha: existingFile.sha,
                  });
                } catch (error) {
                  if (error.status === 404) {
                    // Create new file
                    await octokit.rest.repos.createOrUpdateFileContents({
                      owner: OWNER,
                      repo: REPO,
                      path: `src/content/blog/${post.slug}.md`,
                      message: `Add new blog post: ${post.title.rendered}`,
                      content: Buffer.from(content).toString('base64'),
                    });
                  } else {
                    throw error;
                  }
                }
              }
            } catch (error) {
              console.error('Error:', error);
              process.exit(1);
            }
          }

          fetchPosts();
          EOF
          
          node fetch-posts.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORDPRESS_API_URL: ${{ secrets.WORDPRESS_API_URL }}
          WORDPRESS_TOKEN: ${{ secrets.WORDPRESS_TOKEN }}